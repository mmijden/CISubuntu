---
- name: CIS Controls v8 Docker Security Playbook
  hosts: all
  become: true
  tasks:

    - name: Ensure a separate partition for containers has been created
      command: "lsblk | grep /var/lib/docker"
      register: partition_check
      failed_when: partition_check.rc != 0
      changed_when: false

    - name: Ensure only trusted users are allowed to control Docker daemon
      lineinfile:
        path: /etc/docker/daemon.json
        line: '"hosts": ["unix:///var/run/docker.sock"]'
        state: present

    - name: Ensure auditing is configured for the Docker daemon
      command: "auditctl -l | grep /usr/bin/dockerd"
      register: audit_daemon
      failed_when: audit_daemon.rc != 0
      changed_when: false

    - name: Ensure auditing is configured for Docker files and directories
      block:
        - name: Ensure auditing for /run/containerd
          command: "auditctl -w /run/containerd -p rwxa"
        - name: Ensure auditing for /var/lib/docker
          command: "auditctl -w /var/lib/docker -p rwxa"
        - name: Ensure auditing for /etc/docker
          command: "auditctl -w /etc/docker -p rwxa"
        - name: Ensure auditing for docker.service
          command: "auditctl -w /lib/systemd/system/docker.service -p rwxa"
        - name: Ensure auditing for containerd.sock
          command: "auditctl -w /run/containerd/containerd.sock -p rwxa"
        - name: Ensure auditing for docker.sock
          command: "auditctl -w /var/run/docker.sock -p rwxa"
        - name: Ensure auditing for /etc/default/docker
          command: "auditctl -w /etc/default/docker -p rwxa"
        - name: Ensure auditing for /etc/docker/daemon.json
          command: "auditctl -w /etc/docker/daemon.json -p rwxa"
        - name: Ensure auditing for /etc/containerd/config.toml
          command: "auditctl -w /etc/containerd/config.toml -p rwxa"
        - name: Ensure auditing for /etc/sysconfig/docker
          command: "auditctl -w /etc/sysconfig/docker -p rwxa"
        - name: Ensure auditing for /usr/bin/containerd
          command: "auditctl -w /usr/bin/containerd -p rwxa"
        - name: Ensure auditing for /usr/bin/containerd-shim
          command: "auditctl -w /usr/bin/containerd-shim -p rwxa"
        - name: Ensure auditing for /usr/bin/containerd-shim-runc-v1
          command: "auditctl -w /usr/bin/containerd-shim-runc-v1 -p rwxa"
        - name: Ensure auditing for /usr/bin/containerd-shim-runc-v2
          command: "auditctl -w /usr/bin/containerd-shim-runc-v2 -p rwxa"
        - name: Ensure auditing for /usr/bin/runc
          command: "auditctl -w /usr/bin/runc -p rwxa"

    - name: Ensure the container host has been hardened
      command: "echo 'Hardening tasks to be defined here'"
      changed_when: false

    - name: Ensure that the version of Docker is up to date
      command: "apt-get update && apt-get install -y docker-ce"
      when: ansible_os_family == "Debian"

    - name: Run the Docker daemon as a non-root user, if possible
      lineinfile:
        path: /etc/systemd/system/docker.service
        regexp: '^ExecStart='
        line: 'ExecStart=/usr/bin/dockerd --host=unix:///var/run/docker.sock'
      notify: Restart Docker

    - name: Ensure network traffic is restricted between containers on the default bridge
      command: "iptables -A FORWARD -i docker0 -o docker0 -j DROP"

    - name: Ensure the logging level is set to 'info'
      lineinfile:
        path: /etc/docker/daemon.json
        line: '"log-level": "info"'
        state: present

    - name: Ensure Docker is allowed to make changes to iptables
      command: "iptables -L | grep DOCKER"
      register: iptables_check
      failed_when: iptables_check.rc != 0
      changed_when: false

    - name: Ensure insecure registries are not used
      lineinfile:
        path: /etc/docker/
