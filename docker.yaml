---
- name: Implement CIS Docker Benchmark
  hosts: all
  become: true
  tasks:

    - name: Ensure Docker is installed
      apt:
        name: docker-ce
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: true

    - name: Ensure /etc/docker/daemon.json exists
      file:
        path: /etc/docker/daemon.json
        state: touch
        owner: root
        group: root
        mode: '0644'

    - name: Configure Docker daemon settings
      lineinfile:
        path: /etc/docker/daemon.json
        line: "{{ item }}"
        state: present
      loop:
        - '"hosts": ["unix:///var/run/docker.sock"]'
        - '"log-level": "info"'
        - '"icc": false'  # Disable inter-container communication
        - '"userns-remap": "default"'  # Enable user namespace remapping

    - name: Ensure Docker daemon is restarted
      service:
        name: docker
        state: restarted

    - name: Ensure auditing is configured for Docker files and directories
      block:
        - name: Ensure auditing for /var/lib/docker
          command: "auditctl -w /var/lib/docker -p rwxa"
        - name: Ensure auditing for /etc/docker
          command: "auditctl -w /etc/docker -p rwxa"
        - name: Ensure auditing for docker.sock
          command: "auditctl -w /var/run/docker.sock -p rwxa"

    - name: Ensure only trusted base images are used
      command: "docker images --format '{{.Repository}}:{{.Tag}}' | grep -v 'trusted_image'"
      register: trusted_images
      failed_when: trusted_images.stdout != ""

    - name: Ensure containers are run with the --read-only flag
      command: "docker run --read-only <image_name>"

    - name: Ensure that containers do not run as root
      command: "docker run --user 1000 <image_name>"

    - name: Ensure that the default seccomp profile is not disabled
      command: "docker run --security-opt seccomp=default <image_name>"

    - name: Ensure that the host's network namespace is not shared
      command: "docker run --network none <image_name>"

    - name: Ensure that the container's root filesystem is mounted as read-only
      command: "docker run --read-only <image_name>"

    - name: Ensure that only needed ports are open on the container
      command: "docker run -p <host_port>:<container_port> <image_name>"

    - name: Ensure that the Docker socket is not mounted inside any containers
      command: "docker run --volume /some/other/path:/path <image_name>"

    - name: Ensure that the default ulimit is configured appropriately
      command: "ulimit -n 1024"

    - name: Ensure that the Docker daemon is configured to use TLS
      lineinfile:
        path: /etc/docker/daemon.json
        line: '"tls": true'
        state: present

    - name: Ensure that Docker is allowed to make changes to iptables
      command: "iptables -L | grep DOCKER"

    - name: Ensure that swarm mode is not enabled, if not needed
      command: "docker info | grep 'Swarm: active'"
      register: swarm_status
      failed_when: swarm_status.stdout == "Swarm: active"

    - name: Ensure that unnecessary packages are not installed in the container
      command: "docker run <image_name> dpkg --get-selections | grep -v 'needed_package'"

    - name: Ensure that images are scanned and rebuilt to include security patches
      command: "docker scan <image_name>"

    - name: Ensure that HEALTHCHECK instructions have been added to container images
      command: "docker inspect --format='{{.Config.Healthcheck}}' <image_name>"

    - name: Ensure that only verified packages are installed
      command: "docker run <image_name> apt-get install --only-upgrade <package_name>"

    - name: Ensure that all signed artifacts are validated
      command: "docker trust inspect --pretty <image_name>"

